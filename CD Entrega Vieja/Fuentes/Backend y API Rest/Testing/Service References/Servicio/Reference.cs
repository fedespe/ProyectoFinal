//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Testing.Servicio {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Servicio.IServicioProyectoFinal")]
    public interface IServicioProyectoFinal {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/getClientes", ReplyAction="http://tempuri.org/IServicioProyectoFinal/getClientesResponse")]
        WCFProyectoFinal.DtoCliente[] getClientes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/getClientes", ReplyAction="http://tempuri.org/IServicioProyectoFinal/getClientesResponse")]
        System.Threading.Tasks.Task<WCFProyectoFinal.DtoCliente[]> getClientesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/altaCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/altaClienteResponse")]
        string altaCliente(string nombre, string apellido, string contrasena, string nombreUsuario, string correoElectronico, string telefono, bool habilitado, string documento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/altaCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/altaClienteResponse")]
        System.Threading.Tasks.Task<string> altaClienteAsync(string nombre, string apellido, string contrasena, string nombreUsuario, string correoElectronico, string telefono, bool habilitado, string documento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/actualizarCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/actualizarClienteResponse")]
        string actualizarCliente(string nombre, string apellido, string telefono, string documento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/actualizarCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/actualizarClienteResponse")]
        System.Threading.Tasks.Task<string> actualizarClienteAsync(string nombre, string apellido, string telefono, string documento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/actualizarContrasenaCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/actualizarContrasenaClienteResponse")]
        void actualizarContrasenaCliente(int id, string contrasenaAnterior, string contrasenaNueva);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/actualizarContrasenaCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/actualizarContrasenaClienteResponse")]
        System.Threading.Tasks.Task actualizarContrasenaClienteAsync(int id, string contrasenaAnterior, string contrasenaNueva);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/habilitarCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/habilitarClienteResponse")]
        void habilitarCliente(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/habilitarCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/habilitarClienteResponse")]
        System.Threading.Tasks.Task habilitarClienteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/deshabilitarCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/deshabilitarClienteResponse")]
        void deshabilitarCliente(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/deshabilitarCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/deshabilitarClienteResponse")]
        System.Threading.Tasks.Task deshabilitarClienteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/ingresarCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/ingresarClienteResponse")]
        WCFProyectoFinal.DtoCliente ingresarCliente(string nombreUsuario, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/ingresarCliente", ReplyAction="http://tempuri.org/IServicioProyectoFinal/ingresarClienteResponse")]
        System.Threading.Tasks.Task<WCFProyectoFinal.DtoCliente> ingresarClienteAsync(string nombreUsuario, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/altaAdministrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/altaAdministradorResponse")]
        void altaAdministrador(string nombre, string apellido, string contrasena, string nombreUsuario, string correoElectronico, string telefono, bool habilitado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/altaAdministrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/altaAdministradorResponse")]
        System.Threading.Tasks.Task altaAdministradorAsync(string nombre, string apellido, string contrasena, string nombreUsuario, string correoElectronico, string telefono, bool habilitado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/actualizarAdministrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/actualizarAdministradorResponse")]
        void actualizarAdministrador(string nombre, string apellido, string telefono);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/actualizarAdministrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/actualizarAdministradorResponse")]
        System.Threading.Tasks.Task actualizarAdministradorAsync(string nombre, string apellido, string telefono);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/actualizarContrasenaAdministrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/actualizarContrasenaAdministradorRespon" +
            "se")]
        void actualizarContrasenaAdministrador(int id, string contrasenaAnterior, string contrasenaNueva);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/actualizarContrasenaAdministrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/actualizarContrasenaAdministradorRespon" +
            "se")]
        System.Threading.Tasks.Task actualizarContrasenaAdministradorAsync(int id, string contrasenaAnterior, string contrasenaNueva);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/getAdministradores", ReplyAction="http://tempuri.org/IServicioProyectoFinal/getAdministradoresResponse")]
        WCFProyectoFinal.DtoAdministrador[] getAdministradores();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/getAdministradores", ReplyAction="http://tempuri.org/IServicioProyectoFinal/getAdministradoresResponse")]
        System.Threading.Tasks.Task<WCFProyectoFinal.DtoAdministrador[]> getAdministradoresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/habilitarAdminitrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/habilitarAdminitradorResponse")]
        void habilitarAdminitrador(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/habilitarAdminitrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/habilitarAdminitradorResponse")]
        System.Threading.Tasks.Task habilitarAdminitradorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/deshabilitarAdministrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/deshabilitarAdministradorResponse")]
        void deshabilitarAdministrador(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/deshabilitarAdministrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/deshabilitarAdministradorResponse")]
        System.Threading.Tasks.Task deshabilitarAdministradorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/ingresarAdministrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/ingresarAdministradorResponse")]
        WCFProyectoFinal.DtoAdministrador ingresarAdministrador(string nombreUsuario, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioProyectoFinal/ingresarAdministrador", ReplyAction="http://tempuri.org/IServicioProyectoFinal/ingresarAdministradorResponse")]
        System.Threading.Tasks.Task<WCFProyectoFinal.DtoAdministrador> ingresarAdministradorAsync(string nombreUsuario, string pass);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioProyectoFinalChannel : Testing.Servicio.IServicioProyectoFinal, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioProyectoFinalClient : System.ServiceModel.ClientBase<Testing.Servicio.IServicioProyectoFinal>, Testing.Servicio.IServicioProyectoFinal {
        
        public ServicioProyectoFinalClient() {
        }
        
        public ServicioProyectoFinalClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicioProyectoFinalClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioProyectoFinalClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioProyectoFinalClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFProyectoFinal.DtoCliente[] getClientes() {
            return base.Channel.getClientes();
        }
        
        public System.Threading.Tasks.Task<WCFProyectoFinal.DtoCliente[]> getClientesAsync() {
            return base.Channel.getClientesAsync();
        }
        
        public string altaCliente(string nombre, string apellido, string contrasena, string nombreUsuario, string correoElectronico, string telefono, bool habilitado, string documento) {
            return base.Channel.altaCliente(nombre, apellido, contrasena, nombreUsuario, correoElectronico, telefono, habilitado, documento);
        }
        
        public System.Threading.Tasks.Task<string> altaClienteAsync(string nombre, string apellido, string contrasena, string nombreUsuario, string correoElectronico, string telefono, bool habilitado, string documento) {
            return base.Channel.altaClienteAsync(nombre, apellido, contrasena, nombreUsuario, correoElectronico, telefono, habilitado, documento);
        }
        
        public string actualizarCliente(string nombre, string apellido, string telefono, string documento) {
            return base.Channel.actualizarCliente(nombre, apellido, telefono, documento);
        }
        
        public System.Threading.Tasks.Task<string> actualizarClienteAsync(string nombre, string apellido, string telefono, string documento) {
            return base.Channel.actualizarClienteAsync(nombre, apellido, telefono, documento);
        }
        
        public void actualizarContrasenaCliente(int id, string contrasenaAnterior, string contrasenaNueva) {
            base.Channel.actualizarContrasenaCliente(id, contrasenaAnterior, contrasenaNueva);
        }
        
        public System.Threading.Tasks.Task actualizarContrasenaClienteAsync(int id, string contrasenaAnterior, string contrasenaNueva) {
            return base.Channel.actualizarContrasenaClienteAsync(id, contrasenaAnterior, contrasenaNueva);
        }
        
        public void habilitarCliente(int id) {
            base.Channel.habilitarCliente(id);
        }
        
        public System.Threading.Tasks.Task habilitarClienteAsync(int id) {
            return base.Channel.habilitarClienteAsync(id);
        }
        
        public void deshabilitarCliente(int id) {
            base.Channel.deshabilitarCliente(id);
        }
        
        public System.Threading.Tasks.Task deshabilitarClienteAsync(int id) {
            return base.Channel.deshabilitarClienteAsync(id);
        }
        
        public WCFProyectoFinal.DtoCliente ingresarCliente(string nombreUsuario, string pass) {
            return base.Channel.ingresarCliente(nombreUsuario, pass);
        }
        
        public System.Threading.Tasks.Task<WCFProyectoFinal.DtoCliente> ingresarClienteAsync(string nombreUsuario, string pass) {
            return base.Channel.ingresarClienteAsync(nombreUsuario, pass);
        }
        
        public void altaAdministrador(string nombre, string apellido, string contrasena, string nombreUsuario, string correoElectronico, string telefono, bool habilitado) {
            base.Channel.altaAdministrador(nombre, apellido, contrasena, nombreUsuario, correoElectronico, telefono, habilitado);
        }
        
        public System.Threading.Tasks.Task altaAdministradorAsync(string nombre, string apellido, string contrasena, string nombreUsuario, string correoElectronico, string telefono, bool habilitado) {
            return base.Channel.altaAdministradorAsync(nombre, apellido, contrasena, nombreUsuario, correoElectronico, telefono, habilitado);
        }
        
        public void actualizarAdministrador(string nombre, string apellido, string telefono) {
            base.Channel.actualizarAdministrador(nombre, apellido, telefono);
        }
        
        public System.Threading.Tasks.Task actualizarAdministradorAsync(string nombre, string apellido, string telefono) {
            return base.Channel.actualizarAdministradorAsync(nombre, apellido, telefono);
        }
        
        public void actualizarContrasenaAdministrador(int id, string contrasenaAnterior, string contrasenaNueva) {
            base.Channel.actualizarContrasenaAdministrador(id, contrasenaAnterior, contrasenaNueva);
        }
        
        public System.Threading.Tasks.Task actualizarContrasenaAdministradorAsync(int id, string contrasenaAnterior, string contrasenaNueva) {
            return base.Channel.actualizarContrasenaAdministradorAsync(id, contrasenaAnterior, contrasenaNueva);
        }
        
        public WCFProyectoFinal.DtoAdministrador[] getAdministradores() {
            return base.Channel.getAdministradores();
        }
        
        public System.Threading.Tasks.Task<WCFProyectoFinal.DtoAdministrador[]> getAdministradoresAsync() {
            return base.Channel.getAdministradoresAsync();
        }
        
        public void habilitarAdminitrador(int id) {
            base.Channel.habilitarAdminitrador(id);
        }
        
        public System.Threading.Tasks.Task habilitarAdminitradorAsync(int id) {
            return base.Channel.habilitarAdminitradorAsync(id);
        }
        
        public void deshabilitarAdministrador(int id) {
            base.Channel.deshabilitarAdministrador(id);
        }
        
        public System.Threading.Tasks.Task deshabilitarAdministradorAsync(int id) {
            return base.Channel.deshabilitarAdministradorAsync(id);
        }
        
        public WCFProyectoFinal.DtoAdministrador ingresarAdministrador(string nombreUsuario, string pass) {
            return base.Channel.ingresarAdministrador(nombreUsuario, pass);
        }
        
        public System.Threading.Tasks.Task<WCFProyectoFinal.DtoAdministrador> ingresarAdministradorAsync(string nombreUsuario, string pass) {
            return base.Channel.ingresarAdministradorAsync(nombreUsuario, pass);
        }
    }
}
